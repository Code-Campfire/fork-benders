# Generated by Django 5.1 on 2025-10-11 17:00

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'custom_user',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canon_order', models.IntegerField(help_text='1-66 for normal canon')),
                ('name', models.TextField(help_text="e.g., 'Proverbs'")),
                ('short_name', models.TextField(help_text="e.g., 'Prov' for compact UI")),
                ('testament', models.CharField(choices=[('OT', 'Old Testament'), ('NT', 'New Testament')], help_text='OT or NT', max_length=2)),
            ],
            options={
                'db_table': 'books',
                'ordering': ['canon_order'],
            },
        ),
        migrations.CreateModel(
            name='Translation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='e.g., KJV, NIV', max_length=50, unique=True)),
                ('name', models.TextField(help_text="Full name like 'King James Version'")),
                ('license', models.TextField(blank=True, help_text='e.g., public domain')),
                ('is_public', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'translations',
            },
        ),
        migrations.CreateModel(
            name='Deck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Display title of deck')),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(blank=True, help_text='null = curated/public system deck', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='decks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'decks',
            },
        ),
        migrations.CreateModel(
            name='UserHabit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habit', models.CharField(max_length=255)),
                ('frequency', models.CharField(max_length=255)),
                ('purpose', models.CharField(max_length=255)),
                ('day', models.CharField(max_length=255)),
                ('time', models.DateTimeField()),
                ('reminder', models.IntegerField()),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='habits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_habit',
            },
        ),
        migrations.CreateModel(
            name='Verse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.IntegerField()),
                ('verse_num', models.IntegerField()),
                ('text', models.TextField(help_text='The actual verse text')),
                ('text_len', models.IntegerField(help_text='Text length for filtering')),
                ('tokens_json', models.JSONField(blank=True, help_text='Optional pre-tokenization for cloze', null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verses', to='api.book')),
                ('translation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verses', to='api.translation')),
            ],
            options={
                'db_table': 'verses',
            },
        ),
        migrations.CreateModel(
            name='UserVerseState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ease', models.FloatField(default=2.5, help_text='Higher = grows intervals faster')),
                ('interval', models.IntegerField(default=0, help_text='Spacing in days')),
                ('due_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('repetitions', models.IntegerField(default=0, help_text='Count of consecutive successful reviews')),
                ('lapses', models.IntegerField(default=0, help_text='Count of failures')),
                ('last_grade', models.IntegerField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verse_states', to=settings.AUTH_USER_MODEL)),
                ('verse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_states', to='api.verse')),
            ],
            options={
                'db_table': 'user_verse_state',
            },
        ),
        migrations.CreateModel(
            name='ReviewLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts', models.DateTimeField(default=django.utils.timezone.now, help_text='When the attempt happened')),
                ('mode', models.CharField(choices=[('cloze', 'Cloze'), ('recall', 'Recall'), ('listen', 'Listen')], help_text='cloze, recall, or listen', max_length=10)),
                ('grade', models.IntegerField(help_text='0-5 or 0/1')),
                ('duration_ms', models.IntegerField(help_text='For speed charts')),
                ('response_json', models.JSONField(blank=True, help_text="e.g., {blanks:[{i:3, guess:'discretion', ok:true}]}", null=True)),
                ('deck', models.ForeignKey(blank=True, help_text='null for global queue', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_logs', to='api.deck')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_logs', to=settings.AUTH_USER_MODEL)),
                ('verse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_logs', to='api.verse')),
            ],
            options={
                'db_table': 'review_logs',
            },
        ),
        migrations.CreateModel(
            name='DeckVerse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField()),
                ('deck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deck_verses', to='api.deck')),
                ('verse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deck_verses', to='api.verse')),
            ],
            options={
                'db_table': 'deck_verses',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('display_name', models.TextField(blank=True, help_text='For future social features', null=True)),
                ('review_goal_per_day', models.IntegerField(default=10, help_text='For streak/progress')),
                ('notif_hour', models.IntegerField(blank=True, help_text='0-23; local notifications', null=True)),
                ('accessibility_json', models.JSONField(blank=True, help_text='UI preferences: font size, high contrast, etc.', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_translation', models.ForeignKey(blank=True, help_text='KJV by default', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.translation')),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.AddIndex(
            model_name='deck',
            index=models.Index(fields=['owner'], name='decks_owner_i_092fd6_idx'),
        ),
        migrations.AddIndex(
            model_name='deck',
            index=models.Index(fields=['is_public', 'id'], name='decks_is_publ_75703e_idx'),
        ),
        migrations.AddIndex(
            model_name='verse',
            index=models.Index(fields=['translation', 'book', 'chapter', 'verse_num'], name='verses_transla_2a000b_idx'),
        ),
        migrations.AddIndex(
            model_name='verse',
            index=models.Index(fields=['book'], name='verses_book_id_67b41c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='verse',
            unique_together={('translation', 'book', 'chapter', 'verse_num')},
        ),
        migrations.AddIndex(
            model_name='userversestate',
            index=models.Index(fields=['user', 'due_at'], name='user_verse__user_id_a3ab59_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userversestate',
            unique_together={('user', 'verse')},
        ),
        migrations.AddIndex(
            model_name='reviewlog',
            index=models.Index(fields=['user', 'ts'], name='review_logs_user_id_a6bb44_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewlog',
            unique_together={('user', 'verse', 'ts')},
        ),
        migrations.AddIndex(
            model_name='deckverse',
            index=models.Index(fields=['deck', 'sort_order'], name='deck_verses_deck_id_98ac1d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='deckverse',
            unique_together={('deck', 'verse')},
        ),
    ]
